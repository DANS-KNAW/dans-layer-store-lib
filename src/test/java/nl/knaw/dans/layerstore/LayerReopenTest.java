/*
 * Copyright (C) 2024 DANS - Data Archiving and Networked Services (info@dans.knaw.nl)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nl.knaw.dans.layerstore;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;

import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;
import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class LayerReopenTest extends AbstractTestWithTestDir {

    @Test
    public void should_throw_not_archived() {
        var layer = new LayerImpl(1, stagingDir, new ZipArchive(archiveDir.resolve("test.zip")));
        assertTrue(layer.isOpen());
        layer.close();
        assertFalse(layer.isOpen());
        assertThatThrownBy(layer::reopen).
            isInstanceOf(IllegalStateException.class)
            .hasMessage("Layer is not archived");
    }

    @Test
    public void should_throw_must_be_closed() {
        var layer = new LayerImpl(1, stagingDir, new ZipArchive(archiveDir.resolve("test.zip")));
        assertThatThrownBy(layer::reopen).
            isInstanceOf(IllegalStateException.class)
            .hasMessage("Layer is open, but must be closed for this operation");
    }

    @Test
    public void should_restore_archived_files() throws IOException {
        Files.createDirectories(archiveDir);
        var layer = new LayerImpl(1, stagingDir, new ZipArchive(archiveDir.resolve("test.zip")));
        createEmptyStagingDirFiles("path/to/file1", "path/to/file2");
        layer.close();
        layer.archive();
        assertThat(stagingDir).doesNotExist();

        assertDoesNotThrow(layer::reopen);
        assertThat(stagingDir.resolve("path/to/file1")).exists();
        assertThat(stagingDir.resolve("path/to/file2")).exists();
    }
}
