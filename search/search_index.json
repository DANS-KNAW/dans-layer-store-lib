{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dans-layer-store-lib \u00b6 A library for hierarchical storage of files in a layered way. Layer store \u00b6 A layer store is a hierarchical storage of files in a layered way. A layer contains a subset of the files and folders in the store. A layer is identified by a unique Layer ID. This ID is a Unix timestamp in milliseconds. The layer IDs determine the order in which the layers are stacked. The contents of a layer store can be transformed to a regular directory structure by stacking the layers in the order of their IDs. The layer with the highest ID is the top layer. Files in newer layers override files with the same path in older layers. An example of a layer store with three layers is shown below. +-------------------------------------------------------+ | Layer ID: 1706612162 | | . | | \u2514\u2500\u2500 otherpath | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 otherdir | | \u2514\u2500\u2500 file3.txt | +-------------------------------------------------------+ +-------------------------------------------------------+ | Layer ID: 1705633401 | | . | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u251c\u2500\u2500 file1.txt | | \u2514\u2500\u2500 file2.txt | +-------------------------------------------------------+ +-------------------------------------------------------+ | Layer ID: 1701118823 | | . | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u2514\u2500\u2500 file1.txt | +-------------------------------------------------------+ Transforming this layer store to a regular directory structure results in the following directory structure: +--------------------------------------------------------+ | \u251c\u2500\u2500 otherpath | | \u2502 \u2514\u2500\u2500 to | | \u2502 \u2514\u2500\u2500 otherdir | | \u2502 \u2514\u2500\u2500 file3.txt | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u251c\u2500\u2500 file1.txt | | \u2514\u2500\u2500 file2.txt | +--------------------------------------------------------+ Note that: file1.txt in layer 1705633401 overwrites file1.txt in layer 1701118823 . Adding files is done by adding them to the top layer. Removing files entails removing them from all layers (this is not shown in the example). Layers are envisioned to be implemented as a set of archive files. A simple way to picture the transformation from layer store to directory structure is to imagine the archive files being extracted to one temporary directory, one after the other, in the order of their layer ID. The ItemStore interface \u00b6 The dans-layer-store-lib defines and implements an ItemStore interface. An ItemStore models basically a normal file/folder hierarchy. It provides methods for adding, removing and retrieving items. In the scenario described above, it corresponds to the directory structure that results from transforming the layer store to a regular directory structure. The term item instead of file or folder is used to clearly distinguish between the model and the implementation, especially because the implementation will involve \"physical\" files and folders. Although ItemStore does not expose the concept of a layer, the purpose of this library is to provide a layered storage. The ItemStore interface is intended to hide the layering from the user. It is not really intended to be implemented in other ways, although that is possible. The interface is geared towards providing exactly the features needed to implement ocfl-java 's Storage interface without depending on any OCFL specific concepts. The two are connected through the dans-ocfl-java-extensions-lib . Layer database \u00b6 The layer store is backed by a database. The purpose is to make operations that would otherwise be slow much faster. For example, listing the contents of a folder in a layer store with many layers would require reading all layers. Depending on the type of archive, it could also mean reading all archive files. If layer archives were stored on a very slow medium, such as tape, the problem would be compounded. To solve this problem the layer database stores a record for each item in each layer. The record contains the item's path, and type. If it is a file the record may also contain the entire content of the file. For which files the content is stored is configurable. Obviously, storing the content of all files would be very expensive in terms of storage space, so it is recommended to only store the content of files that are expected to be relatively small and need to be read often. Layer status \u00b6 A layer can be in one of the following states. The state is composed of the following properties: open/closed \u2014 open means that the layer is still being written to. closed means that write operations are no longer allowed. staged \u2014 this means the layer is present in the staging area; if it is also closed, the name of the layer will end with .closed . archived \u2014 an archive has been created for the layer. The following table shows the relationship between the states. It follows the normal lifecycle of a layer. open/closed archived staged? when? 1 open not archived yes initial state of a top layer 2 closed not archived yes (with .closed suffix) just before / during archiving 3 closed archived no archiving succeeded 4 open archived yes reopened 5 closed archived yes (with .closed suffix) closing a reopened layer","title":"DESCRIPTION"},{"location":"#dans-layer-store-lib","text":"A library for hierarchical storage of files in a layered way.","title":"dans-layer-store-lib"},{"location":"#layer-store","text":"A layer store is a hierarchical storage of files in a layered way. A layer contains a subset of the files and folders in the store. A layer is identified by a unique Layer ID. This ID is a Unix timestamp in milliseconds. The layer IDs determine the order in which the layers are stacked. The contents of a layer store can be transformed to a regular directory structure by stacking the layers in the order of their IDs. The layer with the highest ID is the top layer. Files in newer layers override files with the same path in older layers. An example of a layer store with three layers is shown below. +-------------------------------------------------------+ | Layer ID: 1706612162 | | . | | \u2514\u2500\u2500 otherpath | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 otherdir | | \u2514\u2500\u2500 file3.txt | +-------------------------------------------------------+ +-------------------------------------------------------+ | Layer ID: 1705633401 | | . | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u251c\u2500\u2500 file1.txt | | \u2514\u2500\u2500 file2.txt | +-------------------------------------------------------+ +-------------------------------------------------------+ | Layer ID: 1701118823 | | . | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u2514\u2500\u2500 file1.txt | +-------------------------------------------------------+ Transforming this layer store to a regular directory structure results in the following directory structure: +--------------------------------------------------------+ | \u251c\u2500\u2500 otherpath | | \u2502 \u2514\u2500\u2500 to | | \u2502 \u2514\u2500\u2500 otherdir | | \u2502 \u2514\u2500\u2500 file3.txt | | \u2514\u2500\u2500 path | | \u2514\u2500\u2500 to | | \u2514\u2500\u2500 dir1 | | \u251c\u2500\u2500 file1.txt | | \u2514\u2500\u2500 file2.txt | +--------------------------------------------------------+ Note that: file1.txt in layer 1705633401 overwrites file1.txt in layer 1701118823 . Adding files is done by adding them to the top layer. Removing files entails removing them from all layers (this is not shown in the example). Layers are envisioned to be implemented as a set of archive files. A simple way to picture the transformation from layer store to directory structure is to imagine the archive files being extracted to one temporary directory, one after the other, in the order of their layer ID.","title":"Layer store"},{"location":"#the-itemstore-interface","text":"The dans-layer-store-lib defines and implements an ItemStore interface. An ItemStore models basically a normal file/folder hierarchy. It provides methods for adding, removing and retrieving items. In the scenario described above, it corresponds to the directory structure that results from transforming the layer store to a regular directory structure. The term item instead of file or folder is used to clearly distinguish between the model and the implementation, especially because the implementation will involve \"physical\" files and folders. Although ItemStore does not expose the concept of a layer, the purpose of this library is to provide a layered storage. The ItemStore interface is intended to hide the layering from the user. It is not really intended to be implemented in other ways, although that is possible. The interface is geared towards providing exactly the features needed to implement ocfl-java 's Storage interface without depending on any OCFL specific concepts. The two are connected through the dans-ocfl-java-extensions-lib .","title":"The ItemStore interface"},{"location":"#layer-database","text":"The layer store is backed by a database. The purpose is to make operations that would otherwise be slow much faster. For example, listing the contents of a folder in a layer store with many layers would require reading all layers. Depending on the type of archive, it could also mean reading all archive files. If layer archives were stored on a very slow medium, such as tape, the problem would be compounded. To solve this problem the layer database stores a record for each item in each layer. The record contains the item's path, and type. If it is a file the record may also contain the entire content of the file. For which files the content is stored is configurable. Obviously, storing the content of all files would be very expensive in terms of storage space, so it is recommended to only store the content of files that are expected to be relatively small and need to be read often.","title":"Layer database"},{"location":"#layer-status","text":"A layer can be in one of the following states. The state is composed of the following properties: open/closed \u2014 open means that the layer is still being written to. closed means that write operations are no longer allowed. staged \u2014 this means the layer is present in the staging area; if it is also closed, the name of the layer will end with .closed . archived \u2014 an archive has been created for the layer. The following table shows the relationship between the states. It follows the normal lifecycle of a layer. open/closed archived staged? when? 1 open not archived yes initial state of a top layer 2 closed not archived yes (with .closed suffix) just before / during archiving 3 closed archived no archiving succeeded 4 open archived yes reopened 5 closed archived yes (with .closed suffix) closing a reopened layer","title":"Layer status"},{"location":"context/","text":"Context: DANS Data Station Architecture \u00b6 This library is a component in the DANS Data Station Architecture .","title":"\u21d2 Context"},{"location":"context/#context-dans-data-station-architecture","text":"This library is a component in the DANS Data Station Architecture .","title":"Context: DANS Data Station Architecture"},{"location":"installation/","text":"Installation \u00b6 To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. <dependency> <groupId>nl.knaw.dans.lib</groupId> <artifactId>dans-layer-store-lib</artifactId> <version>{version}</version> <!-- <=== FILL LIBRARY VERSION TO USE HERE --> </dependency>","title":"INSTALLATION"},{"location":"installation/#installation","text":"To use this library in a Maven-based project: Include in your pom.xml a declaration for the DANS maven repository: <repositories> <!-- possibly other repository declarations here ... --> <repository> <id>DANS</id> <releases> <enabled>true</enabled> </releases> <url>https://maven.dans.knaw.nl/releases/</url> </repository> </repositories> Include a dependency on this library. <dependency> <groupId>nl.knaw.dans.lib</groupId> <artifactId>dans-layer-store-lib</artifactId> <version>{version}</version> <!-- <=== FILL LIBRARY VERSION TO USE HERE --> </dependency>","title":"Installation"},{"location":"live/","text":"Live tests \u00b6 Some of the unit tests are live tests, meaning they require a connection to a remote server. Normally these tests are skipped. To enable them, copy the file example-live-test.properties to live-test.properties and fill in the values. Then run the tests (they are annotated with @EnabledIf(\"nl.knaw.dans.layerstore.TestConditions#dmftarLiveTestConfigured\") ).","title":"Live tests"},{"location":"live/#live-tests","text":"Some of the unit tests are live tests, meaning they require a connection to a remote server. Normally these tests are skipped. To enable them, copy the file example-live-test.properties to live-test.properties and fill in the values. Then run the tests (they are annotated with @EnabledIf(\"nl.knaw.dans.layerstore.TestConditions#dmftarLiveTestConfigured\") ).","title":"Live tests"},{"location":"to-api/","text":"JavaDocs \u00b6 Open the JavaDocs in a new tab.","title":"API"},{"location":"to-api/#javadocs","text":"Open the JavaDocs in a new tab.","title":"JavaDocs"},{"location":"javadocs/legal/jquery/","text":"jQuery v3.7.1 \u00b6 jQuery License \u00b6 jQuery v 3.7.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Jquery"},{"location":"javadocs/legal/jquery/#jquery-v371","text":"","title":"jQuery v3.7.1"},{"location":"javadocs/legal/jquery/#jquery-license","text":"jQuery v 3.7.1 Copyright OpenJS Foundation and other contributors, https://openjsf.org/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"jQuery License"},{"location":"javadocs/legal/jqueryUI/","text":"jQuery UI v1.13.2 \u00b6 jQuery UI License \u00b6 Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jqueryUI"},{"location":"javadocs/legal/jqueryUI/#jquery-ui-v1132","text":"","title":"jQuery UI v1.13.2"},{"location":"javadocs/legal/jqueryUI/#jquery-ui-license","text":"Copyright jQuery Foundation and other contributors, https://jquery.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/jquery/jquery-ui The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code contained within the demos directory. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== All files located in the node_modules and external directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above.","title":"jQuery UI License"}]}